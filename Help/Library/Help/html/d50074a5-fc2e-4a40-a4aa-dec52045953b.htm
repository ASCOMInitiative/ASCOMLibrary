<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>Introduction to asynchronous client extensions</title><meta name="Microsoft.Help.Id" content="d50074a5-fc2e-4a40-a4aa-dec52045953b" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="Description" content="The ASCOM interfaces support long running operations by means of an &quot;Initiator / Completion variable&quot; pattern in which a short running &quot;initiator&quot; method starts the operation and where a pollable &quot;completion property&quot; indicates when the operation has finis" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">ASCOM Library<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/3e0a4970-b422-4427-bb1e-789bb79e1b4f.htm" title="ASCOM Library" tocid="roottoc">ASCOM Library</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d0969e72-58ac-4f66-b725-8147769b8c5f.htm" title="Asynchronous Library Methods (async await)" tocid="20730441-c717-4b28-8bd5-fc955fc2bf81">Asynchronous Library Methods (async await)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/d0969e72-58ac-4f66-b725-8147769b8c5f.htm" title="How to discover Alpaca devices asynchronously" tocid="d0969e72-58ac-4f66-b725-8147769b8c5f">How to discover Alpaca devices asynchronously</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/d50074a5-fc2e-4a40-a4aa-dec52045953b.htm" title="Introduction to asynchronous client extensions" tocid="d50074a5-fc2e-4a40-a4aa-dec52045953b">Introduction to asynchronous client extensions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/cc7f1bae-15ed-4d69-b238-5d857d570c88.htm" title="How to use the asynchronous Alpaca and COM client extensions" tocid="cc7f1bae-15ed-4d69-b238-5d857d570c88">How to use the asynchronous Alpaca and COM client extensions</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Introduction to asynchronous client extensions</h1></td></tr></table><div><p>
				The ASCOM interfaces support long running operations by means of an "Initiator / Completion variable" pattern in which a short running "initiator" method starts the operation and where a pollable "completion property"
				indicates when the operation has finished. Examples of this include:
			</p><ul><li><p>
						Initiator: <strong>ITelescope.SlewToCoordinatesAsync</strong> - Completion Variable: <strong>ITelescope.Slewing</strong></p></li><li><p>
						Initiator: <strong>ICamera.StartExposure</strong> - Completion Variable: <strong>ICamera.CameraState</strong></p></li><li><p>
						Initiator: <strong>IRotator.MoveAbsolute</strong> - Completion Variable: <strong>IRotator.IsMoving</strong></p></li></ul><p>
				The asynchronous extension methods, which work with both <strong>Alpaca clients</strong> and <strong>COM clients</strong>, encapsulate each long running process initiator / completion variable pair as a single Microsoft .NET
				<a href="https://learn.microsoft.com/dotnet/api/system.threading.tasks.task" target="_blank" rel="noopener noreferrer">Task</a>
				that can be awaited or assigned to a Task variable. This enables the client to wait for the process to complete asynchronously by using language features such as the await operator and Task.WhenAll(task1, task2).
			</p><p>
				A list of extensions for all devices can be found here: <span class="noLink">List of Asynchronous Methods</span>
				and each client's asynchronous methods are also listed in the "Extension Methods" section that follows the client's "Methods" section in the API documentation.
			</p></div><div class="collapsibleAreaRegion" id="NamingVisibility"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBAB')" onkeypress="SectionExpandCollapse_CheckKey('IDBAB', event)" tabindex="0"><img id="IDBABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension naming and visibility</span></div><div id="IDBABSection" class="collapsibleSection"><p>
					In line with .NET naming conventions, the asynchronous extensions are named by taking their initiator method names and appending "Async". This works well in most cases apart from some ITelescope
					members whose names already end with Async. In these cases, to avoid names such as "SlewToTargetAsyncAsync", the text "Task" is inserted before the Async postfix. For example, the interface and
					extension methods for slewing a telescope to its target coordinates are:
				</p><ul><li><p>
							ITelescope Interface: <strong>ITelescope.SlewToTarget</strong> - Synchronous method
						</p></li><li><p>
							ITelescope Interface: <strong>ITelescope.SlewToTargetAsync</strong> - Asynchronous method with completion Variable ITelescope.Slewing
						</p></li><li><p>
							ITelescope Extension: <strong>ITelescope.SlewToTargetTaskAsync</strong> - Returns an awaitable task that completes when the slew ends
						</p></li></ul><p>
					To use the client extensions add a using(C#) / Imports(VB.Net) statement referencing the ASCOM.Common namespace. The extension methods will then appear as additional methods of the Alpaca and COM clients.
				</p></div><div class="collapsibleAreaRegion" id="Exceptions"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCAB')" onkeypress="SectionExpandCollapse_CheckKey('IDCAB', event)" tabindex="0"><img id="IDCABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="IDCABSection" class="collapsibleSection"><p>
					When awaited, the extension methods will always return ASCOM exceptions. These can arrive immediately if thrown by the initiator or later if thrown by the completion variable.
				</p><p>
					If the task returned by the extension method is assigned to a Task variable, behaviour is the same as when the task is awaited, except that all exceptions will be wrapped in
					<a href="https://learn.microsoft.com/dotnet/api/system.aggregateexception" target="_blank" rel="noopener noreferrer">AggregateException</a>
					exceptions in line with normal behaviour of .NET Tasks. In these cases you will need to check the InnerExceptions property in order to find the actual ASCOM exception that was thrown.
				</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Other Resources</h4><div><a href="833dd117-2e34-412d-8d52-4f3fd2dee3b1.htm">Terminology: The difference between Alpaca Devices and ASCOM Devices</a></div></div></div></div><div id="PageFooter" class="pageFooter">Version 1.0.52<p><a href="www.ascom-standards.org" target="_blank" rel="noopener noreferrer">Copyright © 2021 - 2022 ASCOM Initiative</a></p></div></body></html>