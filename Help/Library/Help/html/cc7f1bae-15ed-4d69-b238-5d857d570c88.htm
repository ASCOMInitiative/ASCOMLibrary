<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>How to use the asynchronous Alpaca and COM client extensions</title><meta name="Microsoft.Help.Id" content="cc7f1bae-15ed-4d69-b238-5d857d570c88" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Description" content="The client extensions are designed to be flexible by supporting concurrent client operation and to be easy to use for the developer through the use of optional parameters." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">ASCOM Library<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/3e0a4970-b422-4427-bb1e-789bb79e1b4f.htm" title="ASCOM Library" tocid="roottoc">ASCOM Library</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/d0969e72-58ac-4f66-b725-8147769b8c5f.htm" title="Asynchronous Library Methods (async await)" tocid="20730441-c717-4b28-8bd5-fc955fc2bf81">Asynchronous Library Methods (async await)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/d0969e72-58ac-4f66-b725-8147769b8c5f.htm" title="How to discover Alpaca devices asynchronously" tocid="d0969e72-58ac-4f66-b725-8147769b8c5f">How to discover Alpaca devices asynchronously</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/d50074a5-fc2e-4a40-a4aa-dec52045953b.htm" title="Introduction to asynchronous client extensions" tocid="d50074a5-fc2e-4a40-a4aa-dec52045953b">Introduction to asynchronous client extensions</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/cc7f1bae-15ed-4d69-b238-5d857d570c88.htm" title="How to use the asynchronous Alpaca and COM client extensions" tocid="cc7f1bae-15ed-4d69-b238-5d857d570c88">How to use the asynchronous Alpaca and COM client extensions</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>How to use the asynchronous Alpaca and COM client extensions</h1></td></tr></table><div><p>The client extensions are designed to be flexible by supporting concurrent client operation and to be easy to use for the developer through the use of optional parameters.</p></div><div class="collapsibleAreaRegion" id="Example"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBAB')" onkeypress="SectionExpandCollapse_CheckKey('IDBAB', event)" tabindex="0"><img id="IDBABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="IDBABSection" class="collapsibleSection"><p>
					The following example illustrates how multiple operations to prepare a telescope for imaging can be run in parallel and how to wait for them to complete before starting a further imaging task.
				</p><div id="IDBBBAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBBAB_tab1" class="codeSnippetContainerTabSingle">Using asynchronous client extensions</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBBAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBBAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBBAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create Alpaca clients using default device parameters (service type: http, IP address 127.0.0.1, IP port: 11111, alpaca device number: 0)</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// and assuming that the device serves telescope, filter wheel, rotator, focuser and camera devices)</span>
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> (AlpacaTelescope telescope = <span class="highlight-keyword">new</span> AlpacaTelescope())
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> (AlpacaFilterWheel filterWheel = <span class="highlight-keyword">new</span> AlpacaFilterWheel())
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> (AlpacaRotator rotator = <span class="highlight-keyword">new</span> AlpacaRotator())
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> (AlpacaFocuser focuser = <span class="highlight-keyword">new</span> AlpacaFocuser())
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> (AlpacaCamera camera = <span class="highlight-keyword">new</span> AlpacaCamera())
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Connect to devices</span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    telescope.Connected = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    filterWheel.Connected = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    rotator.Connected = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    focuser.Connected = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    camera.Connected = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Prepare telescope and calculate a target RA 1 hour from the meridian based on local sidereal time</span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> telescope.UnparkAsync();
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    telescope.Tracking = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">double</span> targetRa = (telescope.SiderealTime + <span class="highlight-number">1.0</span>) % <span class="highlight-number">24.0</span>;
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Start concurrent operations on all devices to prepare for imaging</span>
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Task slewScope = telescope.SlewToCoordinatesTaskAsync(targetRa, <span class="highlight-number">0.0</span>);
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Task setFilterWheel = filterWheel.PositionSetAsync(<span class="highlight-number">1</span>);
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Task setRotator = rotator.MoveAbsoluteAsync(<span class="highlight-number">45.0</span>);
<span class="highlight-lineno">25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Task setFocuser = focuser.MoveAsync(focuser.MaxIncrement / <span class="highlight-number">3</span>);
<span class="highlight-lineno">26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Wait for all devices to complete setup</span>
<span class="highlight-lineno">28</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> Task.WhenAll(slewScope, setFilterWheel, setRotator, setFocuser);
<span class="highlight-lineno">29</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">30</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Make a camera exposure and wait for it to complete</span>
<span class="highlight-lineno">31</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> Task.WhenAny(camera.StartExposureAsync(<span class="highlight-number">2.0</span>, <span class="highlight-keyword">true</span>));
<span class="highlight-lineno">32</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">33</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Clean-up</span>
<span class="highlight-lineno">34</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    camera.Connected = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">35</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    focuser.Connected = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">36</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    rotator.Connected = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">37</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    filterWheel.Connected = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">38</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    telescope.Connected = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">39</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div></div><div class="collapsibleAreaRegion" id="Options"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCAB')" onkeypress="SectionExpandCollapse_CheckKey('IDCAB', event)" tabindex="0"><img id="IDCABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension method Optional Parameters</span></div><div id="IDCABSection" class="collapsibleSection"><p>
					All extension methods support three optional parameters in addition to whatever mandatory parameters are required by the initiating method. These are:
				</p><ul><li><p><strong><a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noopener noreferrer">CancellationToken</a> cancellationToken
							</strong>
							- A If you wish to be able to manually cancel a task or have it time out
							after a given period, you can supply a <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noopener noreferrer">CancellationToken</a>. Please note that null is not a valid value for this parameter, instead please use
							<a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken.none#system-threading-cancellationtoken-none" target="_blank" rel="noopener noreferrer">CancellationToken.None</a>, which cannot be cancelled and will not time out.
							The default value for this parameter is <a href="https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken.none#system-threading-cancellationtoken-none" target="_blank" rel="noopener noreferrer">CancellationToken.None</a>.
						</p></li><li><p><strong><a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>pollInterval
							</strong> - Interval between polls of the completion property in milliseconds.
							The default value of this parameter is 1000, yielding a 1 second interval between completion variable polls. The wait loop will compensate for the time taken to retrieve the completion variable
							so that the loop time will be close to the expected interval regardless of how quickly the device responds.
						</p></li><li><p><strong><span class="noLink">ILogger</span> logger
							</strong> - An ILogger instance to which operational messages regarding behaviour will be written.
							The default value of this parameter is null(C#) / Nothing(VB.Net) resulting in no operational messages.
						</p></li></ul><p>
					These examples illustrate how to use the client extension's three optional parameters as positional parameters and as named parameters.
				</p><div id="IDDBCAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDBCAB_tab1" class="codeSnippetContainerTabSingle">Using the optional parameters</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDBCAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDBCAB');return false;" title="Copy">Copy</a></div></div><div id="IDDBCAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create a trace logger to record operational messages. (This implements the ILogger interface)</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TraceLogger TL = <span class="highlight-keyword">new</span> TraceLogger(<span class="highlight-literal">"ClientAsync"</span>, <span class="highlight-keyword">true</span>, logLevel: LogLevel.Debug, identifierWidth: <span class="highlight-number">64</span>);
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create a cancellation token that will time out after 30 seconds</span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>CancellationTokenSource cts = <span class="highlight-keyword">new</span> CancellationTokenSource(TimeSpan.FromSeconds(<span class="highlight-number">30.0</span>));
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>CancellationToken cancelToken = cts.Token;
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create a rotator device and move it by 45.0 degrees</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> (AlpacaRotator rotator = <span class="highlight-keyword">new</span> AlpacaRotator())
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// POSITIONAL PARAMETER EXAMPLES</span>
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Move using defaults: no cancellation, polling every second, no operational messages</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> rotator.MoveAsync(<span class="highlight-number">45.0</span>); <span class="highlight-comment">// Equivalent to: MoveAsync(45.0, CancellationToken.None, 1000, null);</span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Move using a cancellation token and defaults: polling every second, no operational messages</span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> rotator.MoveAsync(<span class="highlight-number">45.0</span>, cancelToken); <span class="highlight-comment">// Equivalent to: MoveAsync(45.0, cancelToken, 1000, null);</span>
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Move using a cancellation token, polling every 100 milliseconds and default: no operational messages</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> rotator.MoveAsync(<span class="highlight-number">45.0</span>, cancelToken, <span class="highlight-number">100</span>); <span class="highlight-comment">// Equivalent to: MoveAsync(45.0, cancelToken, 100, null);</span>
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Move using a cancellation token, polling every 100 milliseconds and logging operational messages</span>
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> rotator.MoveAsync(<span class="highlight-number">45.0</span>, cancelToken, <span class="highlight-number">100</span>, TL);
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// NAMED PARAMETER EXAMPLES</span>
<span class="highlight-lineno">26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Move and log operational messages using defaults: no cancellation, polling every second </span>
<span class="highlight-lineno">28</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> rotator.MoveAsync(<span class="highlight-number">45.0</span>, logger: TL); <span class="highlight-comment">// Equivalent to: MoveAsync(45.0, CancellationToken.None, 1000, TL);</span>
<span class="highlight-lineno">29</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">30</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-comment">// Move polling every 250 milliseconds with defaults: no cancellation, no operational messages</span>
<span class="highlight-lineno">31</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">await</span> rotator.MoveAsync(<span class="highlight-number">45.0</span>, pollInterval: <span class="highlight-number">250</span>); <span class="highlight-comment">// Equivalent to: await rotator.MoveAsync(45.0, CancellationToken.None, 250, null);</span>
<span class="highlight-lineno">32</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Other Resources</h4><div><a href="833dd117-2e34-412d-8d52-4f3fd2dee3b1.htm">Terminology: The difference between Alpaca Devices and ASCOM Devices</a></div></div></div></div><div id="PageFooter" class="pageFooter">Version 1.0.52<p><a href="www.ascom-standards.org" target="_blank" rel="noopener noreferrer">Copyright © 2021 - 2022 ASCOM Initiative</a></p></div></body></html>