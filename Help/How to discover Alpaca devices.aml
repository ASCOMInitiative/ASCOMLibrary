<?xml version="1.0" encoding="utf-8"?>
<topic id="822398fe-b7bc-4024-a1fd-f654bfe79771" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This topic describes how to discover Alpaca devices and options for creating Alpaca clients to communicate with them.</para>
    </introduction>

    <section address="WorkingWithDevices">
      <title>Terminology.</title>
      <content>
		<para>
			Within this topic the term "Alpaca Device" refers to a network device or software service that is running on a particular IP address and IP port. 
			The Alpaca device may serve one or more "ASCOM Devices", which provide capbilites as defined in the <codeEntityReference linkText="DeviceInterfaces">N:ASCOM.Common.DeviceInterfaces</codeEntityReference>
			namespace, e.g. ICamera and IFocuser etc.
		</para>
      </content>
    </section>
    <section address="WorkingWithDevices">
      <title>How to discover Alpaca devices.</title>
      <content>
		<para>
			Alpaca devices that support network discovery can be detected using the <codeEntityReference >T:ASCOM.Alpaca.Discovery.AlpacaDiscovery</codeEntityReference> class.
		</para>
		<para>
			The AlpacaDiscovery class supports two ways to discover devices:
			<list class="bullet">
				<listItem>Synchronous Discovery</listItem>
				<listItem>Asynchronous Discovery</listItem>
			</list>
			The following example illustrates the synchronous discovery pattern where a discovery is initiated and the initiating thread blocks while waiting for the discovery to complete.
			<code source="CodeExamples.cs" region="Synchronous Discovery" language="csharp" title="Synchronous Discovery" />
		</para>
		<para>
			This example illustrates the asynchronous discovery pattern where the application adds a callback to the 
			<codeEntityReference linkText="DiscoveryCompleted Event">E:ASCOM.Alpaca.Discovery.AlpacaDiscovery.DiscoveryCompleted</codeEntityReference> before initiating
			the discovery and then continuing with its own processing.
			When the discovery is complete the callback wil be called and the application can use the returned information.
			<code source="CodeExamples.cs" region="Asynchronous Discovery" language="csharp" title="Asynchronous Discovery" />
		</para>
      </content>
    </section>


  </developerConceptualDocument>
</topic>