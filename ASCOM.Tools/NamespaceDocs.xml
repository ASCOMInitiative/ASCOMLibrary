<?xml version="1.0" encoding="utf-8" ?>
<doc>
	<assembly>
		<name>ASCOM.Tools</name>
		<summary>
			Provides a suite of useful utilities for ASCOM driver and application developers
		</summary>
	</assembly>

	<members>

		<member name="G:ASCOM.Tools">
			<summary>
				<p>
					Provides a suite of useful utilities for ASCOM driver and application developers
				</p>
			</summary>
		</member>

		<member name="N:ASCOM.Tools">
			<summary>
				<h2>ASCOM Tools and Utilities</h2>
				<h3>Summary</h3>
				<p>
					Provides a suite of useful utilities for ASCOM driver and application developers
				</p>
			</summary>
		</member>

		<member name="N:ASCOM.Tools.Novas31">
			<summary>
				<h2>
					NOVAS: Naval Observatory Vector Astrometry Subroutines
				</h2>
				<h3>Introduction</h3>
				<p>
					This component is a .NET presentation of the subroutines and function in the US Naval Observatory
					NOVAS 3.1 library. The following is extracted from its accompanying pdf document, which is also included
					in the ASCOM distribution
				</p>
				<p>
					The Naval Observatory Vector Astrometry Software (NOVAS) is a source-code library in Fortran, C, and Python that provides common astrometric quantities and transformations.
					It can supply, in one or two function calls, the instantaneous celestial position of any star or planet in a variety of coordinate systems.
					The library also provides access to all of the “building blocks” that go into such computations—single-purpose functions for common astrometric algorithms, such as those for precession, nutation, aberration,
					parallax, etc. NOVAS calculations are accurate at the sub-milliarcsecond level.
				</p>
				<p>
					The NOVAS algorithms are based on a vector and matrix formulation that is rigorous and consistent with recent recommendations of the International Astronomical Union (IAU).
					Objects inside and outside the solar system are treated similarly. The position vectors formed and operated on by the NOVAS functions are defined within either the Barycentric Celestial Reference
					System (BCRS) or the Geocentric Celestial Reference System (GCRS), as appropriate. Both of these systems are described in IAU resolutions passed in 2000. GCRS quantities are converted to more
					familiar coordinate systems, such as the equator and equinox of date, by applying standard rotations.
				</p>
			</summary>
		</member>

		<member name="N:ASCOM.Tools.Kepler">
			<summary>
				<h2>KEPLER: Ephemeris Object</h2>
				<h3>Introduction</h3>
				<p>
					The Kepler Ephemeris object contains an orbit engine which takes the orbital parameters of a solar system
					body, plus a a terrestrial date/time, and produces the heliocentric equatorial position and
					velocity vectors of the body in Cartesian coordinates. Orbital parameters are not required for
					the major planets, Kepler contains an ephemeris generator for these bodies that is within 0.05
					arc seconds of the JPL DE404 over a wide range of times, Perturbations from major planets are applied
					to ephemerides for minor planets.
				</p>
				<p>
					The results are passed back as an array containing the two vectors.
					Note that this is the format expected for the ephemeris generator used by the NOVAS-COM vector
					astrometry engine. For more information see the description of Ephemeris.GetPositionAndVelocity().
				</p>
				<p>
					<b>Ephemeris Calculations</b><br />
					The ephemeris calculations in Kepler draw heavily from the work of
					Stephen Moshier moshier@world.std.com. kepler is released as a free software package, further
					extending the work of Mr. Moshier.
				</p>
				<p>
					Kepler does not integrate orbits to the current epoch. If you want the accuracy resulting from
					an integrated orbit, you must integrate separately and supply Kepler with elements of the current
					epoch. Orbit integration is on the list of things for the next major version.
				</p>
				<p>
					Kepler uses polynomial approximations for the major planet ephemerides. The tables
					of coefficients were derived by a least squares fit of periodic terms to JPL's DE404 ephemerides.
					The periodic frequencies used were determined by spectral analysis and comparison with VSOP87 and
					other analytical planetary theories. The least squares fit to DE404 covers the interval from -3000
					to +3000 for the outer planets, and -1350 to +3000 for the inner planets. For details on the
					accuracy of the major planet ephemerides, see the Accuracy Tables page.
				</p>
				<p>
					<b>Date and Time Systems</b><br /><br />
					For a detailed explanation of astronomical timekeeping systems, see A Time Tutorial on the NASA
					Goddard Spaceflight Center site, and the USNO Systems of Time site.
					<br /><br /><i>ActiveX Date values </i><br />
					These are the Windows standard "date serial" numbers, and are expressed in local time or
					UTC (see below). The fractional part of these numbers represents time within a day.
					They are used throughout applications such as Excel, Visual Basic, VBScript, and other
					ActiveX capable environments.
					<br /><br /><i>Julian dates </i><br />
					These are standard Julian "date serial" numbers, and are expressed in UTC time or Terrestrial
					time. The fractional part of these numbers represents time within a day. The standard ActiveX
					"Double" precision of 15 digits gives a resolution of about one millisecond in a full Julian date.
					This is sufficient for the purposes of this program.
					<br /><br /><i>Hourly Time Values </i><br />
					These are typically used to represent sidereal time and right ascension. They are simple real
					numbers in units of hours.
					<br /><br /><i>UTC Time Scale </i><br />
					Most of the ASCOM methods and properties that accept date/time values (either Date or Julian)
					assume that the date/time is in Coordinated Universal Time (UTC). Where necessary, this time
					is converted internally to other scales. Note that UTC seconds are based on the Cesium atom,
					not planetary motions. In order to keep UTC in sync with planetary motion, leap seconds are
					inserted periodically. The error is at most 900 milliseconds.
					<br /><br /><i>UT1 Time Scale </i><br />
					The UT1 time scale is the planetary equivalent of UTC. It it runs smoothly and varies a bit
					with time, but it is never more than 900 milliseconds different from UTC.
					<br /><br /><i>TT Time Scale </i><br />
					The Terrestrial Dynamical Time (TT) scale is used in solar system orbital calculations.
					It is based completely on planetary motions; you can think of the solar system as a giant
					TT clock. It differs from UT1 by an amount called "delta-t", which slowly increases with time,
					and is about 60 seconds right now (2001).
				</p>
			</summary>
		</member>
	</members>
</doc>